package model

import "net/netip"

type WorkApp struct {
	ID      string   `json:"id,omitempty" gorm:"primaryKey"`
	Path    string   `json:"path,omitempty"`
	Cmd     string   `json:"cmd,omitempty"`
	Name    string   `json:"name,omitempty"`
	Hashes  []string `json:"hashes,omitempty" gorm:"serializer:json"`
	Signers []string `json:"signers,omitempty" gorm:"serializer:json"`
}

type IsolatedEnclave struct {
	EncryptionKey           string `json:"encryption_key,omitempty"`
	SetupKey                string `json:"setup_key,omitempty"`
	CreateDocumentShortcuts bool   `json:"create_document_shortcuts,omitempty"`
	WipeDataWhenClosed      bool   `json:"wipe_data_when_closed,omitempty"`
}

type Restrictions struct {
	IsolatedEnclave          IsolatedEnclave `json:"isolated_enclave,omitempty" gorm:"serializer:json"`
	WatermarkText            string          `json:"watermark_text,omitempty"`
	WatermarkType            string          `json:"watermark_type,omitempty"`
	RestrictClipboard        bool            `json:"restrict_clipboard,omitempty"`
	RestrictKeyLogging       bool            `json:"restrict_key_logging,omitempty"`
	RestrictPrinting         bool            `json:"restrict_printing,omitempty"`
	RestrictScreenSharing    bool            `json:"restrict_screen_sharing,omitempty"`
	VerifyWorkspaceIntegrity bool            `json:"verify_workspace_integrity,omitempty"`
	CreateDesktopShortcuts   string          `json:"create_desktop_shortcuts,omitempty"`
	RestrictEndzoneNetwork   bool            `json:"restrict_endzone_network,omitempty"`
	ShowBlueBorder           bool            `json:"show_blue_border,omitempty"`
}

type NetziloWorkspace struct {
	ID           string       `json:"id"`
	WorkApps     []WorkApp    `json:"work_apps,omitempty" gorm:"serializer:json"`
	Restrictions Restrictions `json:"restrictions,omitempty" gorm:"serializer:json"`
	Checks       []string     `json:"checks,omitempty" gorm:"serializer:json"`
}

type RedactRule struct {
	Regex    string `json:"regex,omitempty"`
	ShowLast int    `json:"show_last,omitempty"`
	MaskWith string `json:"mask_with,omitempty"`
}

type DomainSetting struct {
	ID                     string       `json:"id,omitempty"`
	Name                   string       `json:"name,omitempty"`
	RestrictDownloads      []string     `json:"restrict_downloads,omitempty" gorm:"serializer:json"`
	BlockUrls              []string     `json:"block_urls,omitempty" gorm:"serializer:json"`
	Redact                 []RedactRule `json:"redact,omitempty" gorm:"serializer:json"`
	WatermarkText          string       `json:"watermark_text,omitempty"`
	WatermarkType          string       `json:"watermark_type,omitempty"`
	RestrictPrinting       bool         `json:"restrict_printing,omitempty"`
	RestrictClipboard      bool         `json:"restrict_clipboard,omitempty"`
	TemporarySessionCookie bool         `json:"temporary_sessinn_cookie,omitempty"`
	Checks                 []string     `json:"checks,omitempty" gorm:"serializer:json"`
	ShowGrayBorder         bool         `json:"show_gray_border,omitempty"`
	UseWorkspace           bool         `json:"use_workspace,omitempty"`
	UseBrowser             bool         `json:"use_browser,omitempty"`
}

type Components struct {
	NetziloWorkspace  NetziloWorkspace `json:"netzilo_workspace,omitempty" gorm:"serializer:json"`
	DisposableBrowser string           `json:"disposable_browser,omitempty"`
	BrowserExtension  []DomainSetting  `json:"browser_extension,omitempty" gorm:"serializer:json"`
}

type Profile struct {
	AccountID   string     `json:"-" gorm:"index"`
	ID          string     `json:"id,omitempty" gorm:"primaryKey"`
	Name        string     `json:"name,omitempty"`
	OS          string     `json:"os,omitempty"`
	Groups      []string   `json:"groups,omitempty" gorm:"serializer:json"`
	Enabled     bool       `json:"enabled,omitempty"`
	Description string     `json:"description,omitempty"`
	Components  Components `json:"components,omitempty" gorm:"serializer:json"`
}

// Policy of the Rego query
type Policy struct {
	// ID of the policy'
	ID string `gorm:"primaryKey"`

	// AccountID is a reference to Account that this object belongs
	AccountID string `json:"-" gorm:"index"`

	// Name of the Policy
	Name string

	// Description of the policy visible in the UI
	Description string

	// Enabled status of the policy
	Enabled bool

	// Rules of the policy
	Rules []*PolicyRule `gorm:"foreignKey:PolicyID;references:id;constraint:OnDelete:CASCADE;"`

	// SourcePostureChecks are ID references to Posture checks for policy source groups
	SourcePostureChecks []string `gorm:"serializer:json"`
}

// PolicyUpdateOperationType operation type
type PolicyUpdateOperationType int

// PolicyTrafficActionType action type for the firewall
type PolicyTrafficActionType string

// PolicyRuleProtocolType type of traffic
type PolicyRuleProtocolType string

// PolicyRuleDirection direction of traffic
type PolicyRuleDirection string

const (
	// PolicyTrafficActionAccept indicates that the traffic is accepted
	PolicyTrafficActionAccept = PolicyTrafficActionType("accept")
	// PolicyTrafficActionDrop indicates that the traffic is dropped
	PolicyTrafficActionDrop = PolicyTrafficActionType("drop")
)

const (
	// PolicyRuleProtocolALL type of traffic
	PolicyRuleProtocolALL = PolicyRuleProtocolType("all")
	// PolicyRuleProtocolTCP type of traffic
	PolicyRuleProtocolTCP = PolicyRuleProtocolType("tcp")
	// PolicyRuleProtocolUDP type of traffic
	PolicyRuleProtocolUDP = PolicyRuleProtocolType("udp")
	// PolicyRuleProtocolICMP type of traffic
	PolicyRuleProtocolICMP = PolicyRuleProtocolType("icmp")
)

const (
	// PolicyRuleFlowDirect allows traffic from source to destination
	PolicyRuleFlowDirect = PolicyRuleDirection("direct")
	// PolicyRuleFlowBidirect allows traffic to both directions
	PolicyRuleFlowBidirect = PolicyRuleDirection("bidirect")
)

const (
	// DefaultRuleName is a name for the Default rule that is created for every account
	DefaultRuleName = "Default"
	// DefaultRuleDescription is a description for the Default rule that is created for every account
	DefaultRuleDescription = "This is a default rule that allows connections between all the resources"
	// DefaultPolicyName is a name for the Default policy that is created for every account
	DefaultPolicyName = "Default"
	// DefaultPolicyDescription is a description for the Default policy that is created for every account
	DefaultPolicyDescription = "This is a default policy that allows connections between all the resources"
)

const (
	firewallRuleDirectionIN  = 0
	firewallRuleDirectionOUT = 1
)

// PolicyUpdateOperation operation object with type and values to be applied
type PolicyUpdateOperation struct {
	Type   PolicyUpdateOperationType
	Values []string
}

// PolicyRule is the metadata of the policy
type PolicyRule struct {
	// ID of the policy rule
	ID string `gorm:"primaryKey"`

	// PolicyID is a reference to Policy that this object belongs
	PolicyID string `json:"-" gorm:"index"`

	// Name of the rule visible in the UI
	Name string

	// Description of the rule visible in the UI
	Description string

	// Enabled status of rule in the system
	Enabled bool

	// Action policy accept or drops packets
	Action PolicyTrafficActionType

	// Destinations policy destination groups
	Destinations []string `gorm:"serializer:json"`

	// Sources policy source groups
	Sources []string `gorm:"serializer:json"`

	// Bidirectional define if the rule is applicable in both directions, sources, and destinations
	Bidirectional bool

	// Protocol type of the traffic
	Protocol PolicyRuleProtocolType

	// Ports or it ranges list
	Ports []string `gorm:"serializer:json"`
}

// FirewallRule is a rule of the firewall.
type FirewallRule struct {
	// PeerIP of the peer
	PeerIP string

	// Direction of the traffic
	Direction int

	// Action of the traffic
	Action string

	// Protocol of the traffic
	Protocol string

	// Port of the traffic
	Port string
}

type Checks struct {
	// ID of the posture checks
	ID string `gorm:"primaryKey"`

	// Name of the posture checks
	Name string

	// Description of the posture checks visible in the UI
	Description string

	// AccountID is a reference to the Account that this object belongs
	AccountID string `json:"-" gorm:"index"`

	// Checks is a set of objects that perform the actual checks
	Checks ChecksDefinition `gorm:"serializer:json"`
}

// ChecksDefinition contains definition of actual check
type ChecksDefinition struct {
	NBVersionCheck        *NBVersionCheck        `json:",omitempty"`
	OSVersionCheck        *OSVersionCheck        `json:",omitempty"`
	GeoLocationCheck      *GeoLocationCheck      `json:",omitempty"`
	PeerNetworkRangeCheck *PeerNetworkRangeCheck `json:",omitempty"`
	ProcessCheck          *ProcessCheck          `json:",omitempty"`
	NetziloChecks         *NetziloChecks         `json:",omitempty"`
}

type NBVersionCheck struct {
	MinVersion string
}

type OSVersionCheck struct {
	Android *MinVersionCheck
	Darwin  *MinVersionCheck
	Ios     *MinVersionCheck
	Linux   *MinKernelVersionCheck
	Windows *MinKernelVersionCheck
}

type GeoLocationCheck struct {
	// Locations list of geolocations, to which the policy applies
	Locations []Location

	// Action to take upon policy match
	Action string
}

type Location struct {
	// CountryCode 2-letter ISO 3166-1 alpha-2 code that represents the country
	CountryCode string

	// CityName Commonly used English name of the city
	CityName string
}

type PeerNetworkRangeCheck struct {
	Action string
	Ranges []netip.Prefix `gorm:"serializer:json"`
}

type PeerDomainCheck struct {
	Action  string   `json:"action"`
	Domains []string `json:"domains" gorm:"serializer:json"`
}

type SecuritySettingsCheck struct {
	AntivirusCheck      bool `json:"antivirus_check,omitempty"`
	DiskEncryptionCheck bool `json:"disk_encryption_check,omitempty"`
	FirewallCheck       bool `json:"firewall_check,omitempty"`
	OsUpdatesCheck      bool `json:"os_updates_check,omitempty"`
	ScreenLockCheck     bool `json:"screen_lock_check,omitempty"`
}

type FileFolderChecks struct {
	Darwin  []FileFolder `json:"darwin,omitempty"`
	Linux   []FileFolder `json:"linux,omitempty"`
	Windows []FileFolder `json:"windows,omitempty"`
}

type FileFolder struct {
	Path    string `json:"path,omitempty"`
	Content string `json:"content,omitempty"`
}
type FileFolderCheck struct {
	ID     string           `json:"id,omitempty"`
	Action string           `json:"action,omitempty"`
	Check  FileFolderChecks `json:"check,omitempty" gorm:"serializer:json"`
}

type ProcessesChecks struct {
	Android []string `json:"android,omitempty"`
	Darwin  []string `json:"darwin,omitempty"`
	Ios     []string `json:"ios,omitempty"`
	Linux   []string `json:"linux,omitempty"`
	Windows []string `json:"windows,omitempty"`
}

type ProcessesCheck struct {
	ID     string          `json:"id,omitempty"`
	Action string          `json:"action,omitempty"`
	Check  ProcessesChecks `json:"check,omitempty" gorm:"serializer:json"`
}

type Registry struct {
	Key   string `json:"key,omitempty"`
	Value string `json:"value,omitempty"`
	Dir   string `json:"dir,omitempty"`
}

// RegistryCheck defines model for RegistryCheck.
type RegistryCheck struct {
	ID       string     `json:"id,omitempty"`
	Action   string     `json:"action,omitempty"`
	Registry []Registry `json:"registry,omitempty" gorm:"serializer:json"`
}

type AdvancedSettingsCheck struct {
	NetziloWorkspaceCheck bool            `json:"netzilo_workspace_check,omitempty"`
	DeviceIntegrityCheck  bool            `json:"device_integrity_check,omitempty"`
	VirtualDeviceCheck    bool            `json:"virtual_device_check,omitempty"`
	FileFolderCheck       FileFolderCheck `json:"file_folder_check,omitempty" gorm:"serializer:json"`
	ProcessesCheck        ProcessesCheck  `json:"processes_check,omitempty" gorm:"serializer:json"`
	RegistryCheck         RegistryCheck   `json:"registry_check,omitempty" gorm:"serializer:json"`
}

type NetziloChecks struct {
	PeerDomainCheck       *PeerDomainCheck       `json:"peer_domain_check" gorm:"serializer:json"`
	SecuritySettingsCheck *SecuritySettingsCheck `json:"security_settings_check" gorm:"serializer:json"`
	AdvancedSettingsCheck *AdvancedSettingsCheck `json:"advanced_settings_check" gorm:"serializer:json"`
}

// MinKernelVersionCheck Posture check with the kernel version
type MinKernelVersionCheck struct {
	// MinKernelVersion Minimum acceptable version
	MinKernelVersion string `json:"min_kernel_version"`
}

// MinVersionCheck Posture check for the version of operating system
type MinVersionCheck struct {
	// MinVersion Minimum acceptable version
	MinVersion string `json:"min_version"`
}

// ProcessCheck Posture Check for binaries exist and are running in the peer’s system
type ProcessCheck struct {
	Processes []Process `json:"processes"`
}

// Process Describes the operational activity within a peer's system.
type Process struct {
	// LinuxPath Path to the process executable file in a Linux operating system
	LinuxPath *string `json:"linux_path,omitempty"`

	// MacPath Path to the process executable file in a Mac operating system
	MacPath *string `json:"mac_path,omitempty"`

	// WindowsPath Path to the process executable file in a Windows operating system
	WindowsPath *string `json:"windows_path,omitempty"`
}
